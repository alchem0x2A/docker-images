name: Build the pytorch container

on:
  push:
    branches:
      - master
      - workflow
    paths:
      - 'mlchem_pytorch/**'
      - '.github/workflows/build_pytorch.yml'
  workflow_dispatch:



jobs:
  foundation-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant:
          - cuda
          - cpu
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "REPO_OWNER=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Inject env variables
        uses: falti/dotenv-action@v1.0.4
        with:
          path: ./env
          export-variables: true
          keys-case: bypass
          
      - name: Get Current Date
        id: date
        run: |
          echo "DATE=$(date +'%Y-%m-%d')" >>${GITHUB_ENV}

      - name: Check disk space
        run: |
          df -h
      - name: Build with foundation image -- cuda
        uses: docker/build-push-action@v5
        with:
          context: docker-stacks/images/docker-stacks-foundation
          push: true
          tags: |
             ghcr.io/${{ env.REPO_OWNER }}/mlchem_pytorch:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
        # if: matrix.variant == 'cuda'

  #     - name: Build with foundation image -- nvhpc
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: docker-stacks/images/docker-stacks-foundation
  #         push: true
  #         tags: |
  #            ghcr.io/${{ env.REPO_OWNER }}/docker-stacks-foundation:nvhpc
  #            ghcr.io/${{ env.REPO_OWNER }}/docker-stacks-foundation:nvhpc-${{ env.DATE }}
  #            ghcr.io/${{ env.REPO_OWNER }}/docker-stacks-foundation:nvhpc-${{ env.NVHPC_VERSION }}-cuda${{ env.MAJOR_CUDA_VERSION }}-py${{ env.BASE_PY_VERSION }}
  #         build-args: |
  #           ROOT_CONTAINER=nvcr.io/nvidia/nvhpc:${{ env.NVHPC_VERSION }}-runtime-cuda${{ env.MAJOR_CUDA_VERSION }}-ubuntu${{ env.UBUNTU_VERSION }}
  #           PYTHON_VERSION=${{ env.BASE_PY_VERSION }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64
  #       if: matrix.variant == 'nvhpc'
  #     - name: Check disk space
  #       run: |
  #         df -h
        
  # base-notebook-image:
  #   needs: foundation-image
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       variant:
  #         - cuda
  #         - nvhpc
  #   steps:
  #     - name: Maximize build space
  #       run: |
  #         sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
  #         sudo docker image prune --all --force
  #         df -h
  #     - name: Checkout
  #       uses: actions/checkout@v5
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: setup docker buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Github Container Repo
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: set lower case owner name
  #       run: |
  #         echo "REPO_OWNER=${OWNER,,}" >>${GITHUB_ENV}
  #       env:
  #         OWNER: '${{ github.repository_owner }}'
  #     - name: Inject env variables
  #       uses: falti/dotenv-action@v1.0.4
  #       with:
  #         path: ./jupyter-base-image/env
  #         export-variables: true
  #         keys-case: bypass
  #     - name: Download jupyter docker stack
  #       run: |
  #         git clone --depth 1 https://github.com/jupyter/docker-stacks.git
  #         cd docker-stacks
  #         git fetch origin ${{ env.JUPYTER_COMMIT_HASH }}
  #         git checkout ${{ env.JUPYTER_COMMIT_HASH }}
  #     - name: Get Current Date
  #       id: date
  #       run: |
  #         echo "DATE=$(date +'%Y-%m-%d')" >>${GITHUB_ENV}
  #     - name: Combine docker files
  #       run: |
  #         curdir=$(pwd)
  #         cp ./jupyter-base-image/* docker-stacks/images/base-notebook/
  #         cd docker-stacks/images/base-notebook/
  #         cat Dockerfile.part >> Dockerfile
  #     - name: Check disk space
  #       run: |
  #         df -h
  #     - name: Build base notebook image -- cuda
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: docker-stacks/images/base-notebook
  #         push: true
  #         tags: |
  #           ghcr.io/${{ env.REPO_OWNER }}/base-notebook:cuda
  #         build-args: |
  #           BASE_CONTAINER=ghcr.io/${{ env.REPO_OWNER }}/docker-stacks-foundation:cuda
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64
  #       if: matrix.variant == 'cuda'
  #     - name: Build base notebook image -- nvhpc
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: docker-stacks/images/base-notebook
  #         push: true
  #         tags: |
  #           ghcr.io/${{ env.REPO_OWNER }}/base-notebook:nvhpc
  #         build-args: |
  #           BASE_CONTAINER=ghcr.io/${{ env.REPO_OWNER }}/docker-stacks-foundation:nvhpc
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64
  #       if: matrix.variant == 'nvhpc'
  #     - name: Check disk space
  #       run: |
  #         df -h
  # trigger-downstream:
  #   needs: base-notebook-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Rebuild downstream images
  #       run: |
  #         gh workflow run build_mlchem.yml
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
